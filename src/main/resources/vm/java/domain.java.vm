package ${packageName}.domain;

#foreach ($import in $importList)
import ${import};
#end
import com.baomidou.mybatisplus.annotation.TableName;
import com.ycicic.fivehearts.framework.aspectj.lang.annotation.Excel;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.ycicic.fivehearts.framework.web.domain.BaseEntity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import java.util.Objects;
import lombok.EqualsAndHashCode;
#if($table.crud || $table.sub)
#elseif($table.tree)
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
#if($table.crud || $table.sub)
#set($Entity="BaseEntity")
#elseif($table.tree)
#set($Entity="TreeEntity")
#end
@Data
@TableName("${tableName}")
@EqualsAndHashCode(callSuper = true)
@ApiModel(description = "${functionName}对象 ${tableName}")
public class ${ClassName} extends ${Entity} {
    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
#if(!$table.isSuperColumn($column.javaField))
    /**
     * $column.columnComment
     */
#if($column.list)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if($parentheseIndex != -1)
    @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
#elseif($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
#else
    @Excel(name = "${comment}")
#end
#end
    @ApiModelProperty("${comment}")
    private $column.javaType $column.javaField;

#end
#end
#if($table.sub)
    /** $table.subTable.functionName信息 */
    private List<${subClassName}> ${subclassName}List;

#end

    public LambdaQueryWrapper<${ClassName}> getLambdaQueryWrapper() {
        LambdaQueryWrapper<${ClassName}> wrapper = new QueryWrapper<${ClassName}>().lambda();
#foreach($column in $columns)
    #set($queryType=$column.queryType)
    #set($javaField=$column.javaField)
    #set($javaType=$column.javaType)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #if($column.query)
        #if($column.queryType == "EQ")
        wrapper.eq(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "NE")
        wrapper.ne(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "GT")
        wrapper.gt(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "GTE")
        wrapper.ge(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "LT")
        wrapper.lt(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "LTE")
        wrapper.le(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField});
        #elseif($queryType == "LIKE")
        wrapper.like(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, "%" + ${javaField} + "%");
        #elseif($queryType == "BETWEEN")
        wrapper.between(Objects.nonNull(${javaField}), ${ClassName}::get${AttrName}, ${javaField}, ${javaField});
        #end
    #end
#end
        return wrapper;
    }

}
